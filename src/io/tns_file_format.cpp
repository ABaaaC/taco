#include "taco/io/tns_file_format.h"

#include <iostream>
#include <sstream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string>

#include "taco/tensor_base.h"
#include "taco/util/error.h"

namespace taco {
namespace io {
namespace tns {

void insertFirstComponent(std::ifstream &tnsfile, TensorBase* tensor, 
                          std::vector<int> &dims) {
  std::string line;
  if (!std::getline(tnsfile, line)) {
    return;
  }

  std::stringstream iss(line);
  std::string tok;
  std::vector<std::string> tokens;

  while (iss >> tok) {
    tokens.push_back(tok);
  }

  if (tensor->getOrder() + 1 != tokens.size()) {
    dims.clear();
    return;
  }

  std::vector<int> coord(tensor->getOrder());
  for (size_t i = 0; i < tensor->getOrder(); ++i) {
    coord[i] = std::stoi(tokens[i]) - 1;
    dims[i] = std::max(dims[i], coord[i] + 1);
  }

  double val = std::stod(tokens.back());
  if (val != 0.0) {
    tensor->insert(coord, val);
  }
}

void readFile(std::ifstream &tnsfile, std::vector<int> &dims,
              TensorBase* tensor) {
  dims = tensor->getDimensions(); 

  // Insert first non-zero component into tensor, verifying that TNS file 
  // describes tensor of expected order.
  insertFirstComponent(tnsfile, tensor, dims);

  // If TNS file describes tensor of different order, then quit loading.
  if (dims.size() != tensor->getOrder()) {
    return;
  }

  std::string line;
  std::string tok;

  std::vector<int> coord(tensor->getOrder());

  while (std::getline(tnsfile, line)) {
    std::stringstream iss(line);
    
    for (size_t i = 0; i < tensor->getOrder(); ++i) {
      iss >> tok;
      coord[i] = std::stoi(tok) - 1;
      dims[i] = std::max(dims[i], coord[i] + 1);
    }
    
    iss >> tok;

    double val = std::stod(tok);
    if (val != 0.0) {
      tensor->insert(coord, val);
    }
  }

  tensor->pack();
}

//void writeFile(std::ofstream &tnsfile, std::string name,
//               const std::vector<int> dimensions, int nnzero) {
//  tnsfile << "%-----------------------------------" << std::endl;
//  tnsfile << "% MTX matrix file generated by taco " << std::endl;
//  tnsfile << "% name: " << name << std::endl;
//  tnsfile << "%-----------------------------------" << std::endl;
//  for (size_t i=0; i<dimensions.size(); i++) {
//    tnsfile << dimensions[i] << " " ;
//  }
//  tnsfile << " " << nnzero << std::endl;
//}


}}}
